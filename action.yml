name: "Docker Build (+buildx) with Zmicro"
description: "github action for docker (+buildx) with Zmicro"
author: "Zero <GitHub: whatwewant>"
branding:
  icon: "message-square"
  color: "green"
inputs:
  tags:
    required: false
    description: specify build tags
  push:
    required: false
    description: specify whether to push remote
    default: "fasle"
  context:
    required: false
    description: specify build context
  build-args:
    required: false
    description: specify build build-args
  platforms:
    required: false
    description: specify build platforms
  cache-from:
    required: false
    description: specify build cache-from
  cache-to:
    required: false
    description: specify build cache-to
  labels:
    required: false
    description: specify build labels
  builder:
    required: false
    description: specify builder instance
  network:
    required: false
    description: specify build network
  stage:
    required: false
    description: specify build stage
  dockerfile:
    required: false
    description: specify the dockerfile name, default => Dockerfile
  ssh:
    required: false
    description: specify ssh agent socket or keys to expose to the build
  registry:
    description: "Server address of Docker registry. If not set then will default to Docker Hub"
    required: false
  username:
    description: "Username used to log against the Docker registry"
    required: false
  password:
    description: "Password or personal access token used to log against the Docker registry"
    required: false
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: composite
  steps:
    - name: Set up Zmicro
      uses: zmicro-design/action-setup-zmicro@v1

    - name: Set up Docker
      uses: zmicro-design/action-setup-docker@v1

    - name: Login Docker
      shell: zmicro {0}
      run: |
        REGISTRY=${{ inputs.registry }}
        USERNAME=${{ inputs.username }}
        PASSWORD=${{ inputs.password }}

        if [ -n "$USERNAME" ] && [ -n "$PASSWORD" ]; then
          login::docker $USERNAME $PASSWORD $REGISTRY
        fi

    - name: Run Docker Build (+buildx)
      shell: zmicro {0}
      run: |
        BUILD_CMD="docker buildx build"

        IS_PUSH=${{ inputs.push }}
        TAGS=${{ inputs.tags }}
        BUILD_CONTEXT=${{ inputs.context }}
        BUILD_ARGS=${{ inputs.build-args }}
        PLATFORMS=${{ inputs.platforms }}
        CACHE_FROM=${{ inputs.cache-from }}
        CACHE_TO=${{ inputs.cache-to }}
        BUILDER=${{ inputs.builder }}
        NETWORK=${{ inputs.network }}
        STAGE=${{ inputs.stage }}
        DOCKERFILE=${{ inputs.dockerfile }}
        SSH=${{ inputs.ssh }}

        if [ "$IS_PUSH" = "true" ]; then
          BUILD_CMD="$BUILD_CMD --push"
        fi

        if [ -z "$BUILD_CONTEXT" ]; then
          BUILD_CONTEXT="."
        fi

        if [ -n "$BUILD_ARGS" ]; then
          BUILD_CMD="$BUILD_CMD --build-arg $BUILD_ARGS"
        fi

        if [ -n "$CACHE_FROM" ]; then
          BUILD_CMD="$BUILD_CMD --cache-from $CACHE_FROM"
        fi

        if [ -n "$CACHE_TO" ]; then
          BUILD_CMD="$BUILD_CMD --cache-to $CACHE_TO"
        fi

        if [ -n "$PLATFORMS" ]; then
          BUILD_CMD="$BUILD_CMD --platform $PLATFORMS"
        fi

        if [ -n "$TAGS" ]; then
          TAGS_SPLITS=$(string::split , $TAGS)
          # for tag in ${TAGS_SPLITS[@]}; do
          #   BUILD_CMD="$BUILD_CMD --tag $tag"
          # done

          add_tag() {
            local tag=$2
            BUILD_CMD="$BUILD_CMD --tag $tag"
          }

          array::each add_tag $TAGS_SPLITS
        fi

        if [ -n "$BUILDER" ]; then
           BUILD_CMD="$BUILD_CMD --builder $BUILDER"
        fi

        if [ -n "$NETWORK" ]; then
           BUILD_CMD="$BUILD_CMD --network $NETWORK"
        fi

        if [ -n "$STAGE" ]; then
           BUILD_CMD="$BUILD_CMD --stage $STAGE"
        fi

        if [ -n "$DOCKERFILE" ]; then
           BUILD_CMD="$BUILD_CMD -f $DOCKERFILE"
        fi

        if [ -n "$SSH" ]; then
           BUILD_CMD="$BUILD_CMD --ssh $SSH"
        fi

        TMP_DATA_DIR="/tmp/$(os::random_string 6)"
        if [ ! -d "$TMP_DATA_DIR" ]; then
          mkdir -p $TMP_DATA_DIR
        fi
        BUILD_CMD="$BUILD_CMD --iidfile $TMP_DATA_DIR/iidfile"
        BUILD_CMD="$BUILD_CMD --metadata-file $TMP_DATA_DIR/metadata-file"
        BUILD_CMD="$BUILD_CMD ${BUILD_CONTEXT}"

        log::info "[$(date)] CMD: $BUILD_CMD"
        $BUILD_CMD
